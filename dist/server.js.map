{"version":3,"file":"server.js","mappings":";;;;;;;;;;;;;;;AAAA,6DAAmC;AACnC,iFAA6B;AAE7B,wEAAuB;AAEvB,MAAM,GAAG,GAAG,qBAAO,GAAE;AACrB,MAAM,IAAI,GAAG,IAAI;AAEjB,MAAM,SAAS,GAAG,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC;AAEpD,GAAG,CAAC,GAAG,CAAC,iBAAO,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;AAElC,GAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACxB,GAAG,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;AAClD,CAAC,CAAC;AAEF,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE;IAC/B,MAAM,MAAM,GAAY;QACpB;YACI,IAAI,EAAE,uBAAU,GAAE,CAAC,QAAQ,EAAE;YAC7B,IAAI,EAAE,SAAS;YACf,UAAU,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;SACvC;KACJ;IAEH,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC;AACvB,CAAC,CAAC;AAEF,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE;IACpB,OAAO,CAAC,GAAG,CAAC,0BAA0B,IAAI,EAAE,CAAC;AAC/C,CAAC,CAAC;;;;;;;;;;;AC9BF;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://alex-winters-app/./src/Server/index.ts","webpack://alex-winters-app/external node-commonjs \"crypto\"","webpack://alex-winters-app/external commonjs \"express\"","webpack://alex-winters-app/external node-commonjs \"path\"","webpack://alex-winters-app/webpack/bootstrap","webpack://alex-winters-app/webpack/before-startup","webpack://alex-winters-app/webpack/startup","webpack://alex-winters-app/webpack/after-startup"],"sourcesContent":["import { randomUUID } from 'crypto'\nimport express from 'express'\nimport { Layer } from 'Model/Layer'\nimport path from 'path'\n\nconst app = express()\nconst PORT = 3000\n\nconst publicDir = path.join(__dirname, '/../public')\n\napp.use(express.static(publicDir))\n\napp.get('/', (req, res) => {\n  res.sendFile(path.join(publicDir, 'index.html'))\n})\n\napp.get('/layers', (_, response) => {\n    const layers: Layer[] = [\n        {\n            uuid: randomUUID().toString(),\n            name: 'Layer 1',\n            created_at: new Date().toISOString(),\n        }\n    ]\n\n  response.json(layers)\n})\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`)\n})\n","module.exports = require(\"crypto\");","module.exports = require(\"express\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/Server/index.ts\");\n",""],"names":[],"sourceRoot":""}